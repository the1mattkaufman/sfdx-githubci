#Push to staging
#uat has new changes from one or more dev branches that passed testing and code review in the pull request

#Pushes source code to staging org
#Does NOT automatically open a pull request to merge with production, that is done manually

#Previous step: pr-uat-to-staging
#Next step: pr-staging-to-main

# Unique name for this workflow
name: Push/Org Deploy - staging

#Pull request closed merge=true allows access to the ref branch while push does not
on:
  pull_request:
    types:
      - closed
    branches:
      - "staging"
      - "Staging"

# Jobs to be executed
jobs:
  staging-org-test-and-deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      # Checkout the code in the pull request
      - name: "Checkout source code"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Install Salesforce CLI
      - name: Install Salesforce CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          sudo mkdir ~/sfdx-cli
          sudo tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx-cli --strip-components 1
          export PATH=$PATH:~/sfdx-cli/bin
          echo "~/sfdx-cli/bin" >> $GITHUB_PATH
          sudo chmod -R 777 ~/sfdx-cli
          sfdx --version

      # Store secret for dev hub org
      - name: "Populate auth file with STAGING_SFDX_URL secret"
        run: "echo ${{secrets.STAGING_SFDX_URL}} > ./STAGING_SFDX_URL.txt"

      # Authenticate dev hub
      # Authorizes org using SFDX auth url stored in a file
      - name: "Authenticate Dev Hub"
        run: sfdx auth:sfdxurl:store -f ./STAGING_SFDX_URL.txt -a devhub -d

      # Remove auth file
      - name: "Remove auth file"
        run: rm -f ./STAGING_SFDX_URL.txt

      # Set config username for CLI Commands
      - name: "Set config username for CLI commands"
        run: sfdx config:set defaultusername=${{secrets.STAGING_SFDX_USER}} defaultdevhubusername=${{secrets.STAGING_SFDX_USER}}

      # Store branch ids
      - name: Get branch refs
        run: |
          echo "HEAD_REF=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV
          echo "BASE_REF=$(echo ${GITHUB_BASE_REF} | tr / -)" >> $GITHUB_ENV

      # Install SFDX & SFDX Git Delta
      # Since staging was just merged with the feature branch, we have to reference staging's previous commit for the diff (origin/${{ env.HEAD_REF }}^ = staging^)
      - name: Install SFDX Git Delta
        run: |
          echo y | ~/sfdx-cli/bin/run plugins:install sfdx-git-delta
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git --no-pager diff --name-status origin/main origin/${{ env.HEAD_REF }}

      # Convert source code to metadata
      - name: Convert source code to metadata format
        run: sfdx force:source:convert --rootdir force-app --outputdir source_convert

      # Generate manifest from delta (git diff between head and main)
      - name: Generate destructive changes metadeta
        run: |
          sfdx sgd:source:delta --to origin/${{ env.HEAD_REF }} --from origin/main --output .
          echo
          echo "--- package.xml generated with added and modified metadata ---"
          cat package/package.xml
          echo
          echo
          echo
          echo "-- destructiveChanges.xml ---"
          cat destructiveChanges/destructiveChanges.xml
          echo
          echo
          echo
          echo "--- destructiveChanges/package.xml ---"
          cat destructiveChanges/package.xml

      # Copy changes to release artifact
      - name: Append destructive changes to source metadata
        run: cp destructiveChanges/destructiveChanges.xml source_convert

      # Create release artifact
      - name: Create release artifact
        run: zip -r package.zip source_convert

      - name: Remove source convert output directory
        run: rm -r source_convert

      # Validate and deploy
      - name: Deploy artifact to staging org
        run: sfdx force:mdapi:deploy --zipfile package.zip --testlevel RunAllTestsInOrg -w 10

      # Delete staging-merge branch as we are done with it
      - name: Branch Delete - ${{ env.HEAD_REF }}
        uses: dawidd6/action-delete-branch@v3
        with:
          github_token: ${{ secrets.REPO_SCOPED_TOKEN }}
          branches: ${{ env.HEAD_REF }}
